01背包

例题:https://www.acwing.com/problem/content/2/

有 N 件物品和一个容量是 V 的背包。每件物品只能使用一次。

第 i 件物品的体积是 vi，价值是 wi。

求解将哪些物品装入背包，可使这些物品的总体积不超过背包容量，且总价值最大。
输出最大价值。

输入格式
第一行两个整数，N，V，用空格隔开，分别表示物品数量和背包容积。

接下来有 N 行，每行两个整数 vi,wi，用空格隔开，分别表示第 i 件物品的体积和价值。

输出格式
输出一个整数，表示最大价值。

数据范围
0<N,V≤1000
0<vi,wi≤1000
输入样例
4 5
1 2
2 4
3 4
4 5
输出样例：
8

#include <iostream>
#include <cstring>
#include <algorithm>
using namespace std;
const int N = 1e3 + 10;
int arr[N];
int n,m;

int main()
{
    cin >> n >> m;
    for(int i = 1;i <= n;i++)
    {
        int v,w;
        cin >> v >> w;
        for(int j = m;j >= v;j--)
        {
            arr[j] = max(arr[j],arr[j - v] + w);
        }
    }
    cout << arr[m] << endl;
    return 0;
}

算法核心:
每一次迭代只会用到上一层的状态 所以二维数组可以优化为一维数组
从大到小枚举体积是因为小体积存的是上一个状态的价值 而我们需要用到上一个状态所以需要从大到小枚举
arr[j] 表示总体积为j的可以获取的最大价值

完全背包

例题:https://www.acwing.com/problem/content/3/

有 N 种物品和一个容量是 V 的背包，每种物品都有无限件可用。

第 i 种物品的体积是 vi，价值是 wi。

求解将哪些物品装入背包，可使这些物品的总体积不超过背包容量，且总价值最大。
输出最大价值。

输入格式
第一行两个整数，N，V，用空格隔开，分别表示物品种数和背包容积。

接下来有 N 行，每行两个整数 vi,wi，用空格隔开，分别表示第 i 种物品的体积和价值。

输出格式
输出一个整数，表示最大价值。

数据范围
0<N,V≤1000
0<vi,wi≤1000
输入样例
4 5
1 2
2 4
3 4
4 5
输出样例：
10

一维优化表示:
#include <iostream>
#include <cstring>
#include <algorithm>
using namespace std;
const int N = 1e3 + 10;
int dp[N];
int n,m;

int main()
{
    cin >> n >> m;
    for(int i = 1;i <= n;i++)
    {
        int v,w;
        cin >> v >> w;
        for(int j = v;j <= m;j++)
        {
            dp[j] = max(dp[j],dp[j - v] + w);
        }
    }
    cout << dp[m] << endl;
    return 0;
}
二维朴素表示
#include <iostream>
#include <cstring>
#include <algorithm>
using namespace std;
const int N = 1e3 + 10;
int dp[N][N];
int n,m;

int main()
{
    cin >> n >> m;
    for(int i = 1;i <= n;i++)
    {
        int v,w;
        cin >> v >> w;
        for(int j = 0;j <= m;j++)
        {
            dp[i][j] = dp[i - 1][j];
            if(j >= v) dp[i][j] = max(dp[i][j],dp[i][j - v] + w);
        }
    }
    cout << dp[n][m] << endl;
    return 0;
}

算法核心:
二维朴素的i j分别表示从前i个物品当中选总体积不超过j的可获取的最大价值
一维表示总体积不超过j的最大价值
完全背包需要从小到大来枚举是因为需要用到当前层的状态而不是上一层 因为可以一直选择同一个物品

多重背包Ⅰ

例题:https://www.acwing.com/problem/content/description/4/

有 N 种物品和一个容量是 V 的背包。

第 i 种物品最多有 si 件，每件体积是 vi，价值是 wi。

求解将哪些物品装入背包，可使物品体积总和不超过背包容量，且价值总和最大。
输出最大价值。

输入格式
第一行两个整数，N，V，用空格隔开，分别表示物品种数和背包容积。

接下来有 N 行，每行三个整数 vi,wi,si，用空格隔开，分别表示第 i 种物品的体积、价值和数量。

输出格式
输出一个整数，表示最大价值。

数据范围
0<N,V≤100
0<vi,wi,si≤100
输入样例
4 5
1 2 3
2 4 1
3 4 3
4 5 2
输出样例：
10

#include <iostream>
#include <algorithm>
#include <cstring>
using namespace std;
const int N = 110;
int dp[N];
int n,V;

int main()
{

    cin >> n >> V;
    for(int i = 1;i <= n;i++)
    {
        int v,w,s;
        cin >> v >> w >> s;
        for(int j = V;j >= v;j--)
        {
            for(int k = 1;k <= s && k * v <= j;k++)
            {
                dp[j] = max(dp[j],dp[j - k * v] + k * w);    
            }
        }
    }
    
    
    cout << dp[V] << endl;
    return 0;
}

算法核心:
此题一维优化也是需要从大到小枚举体积 因为需要用到上一层的数据
这跟完全背包不一样因为这是一次性取 而完全背包是一个一个取
一次性取k个则需要记录上一层信息

多重背包Ⅱ

例题:https://www.acwing.com/problem/content/5/

有 N 种物品和一个容量是 V 的背包。

第 i 种物品最多有 si 件，每件体积是 vi，价值是 wi。

求解将哪些物品装入背包，可使物品体积总和不超过背包容量，且价值总和最大。
输出最大价值。

输入格式
第一行两个整数，N，V，用空格隔开，分别表示物品种数和背包容积。

接下来有 N 行，每行三个整数 vi,wi,si，用空格隔开，分别表示第 i 种物品的体积、价值和数量。

输出格式
输出一个整数，表示最大价值。

数据范围
0<N≤1000
0<V≤2000
0<vi,wi,si≤2000
提示：
本题考查多重背包的二进制优化方法。

输入样例
4 5
1 2 3
2 4 1
3 4 3
4 5 2
输出样例：
10

#include <iostream>
#include <cstring>
#include <algorithm>
using namespace std;
const int N = 12000,M = 2010;
int W[N],V[N],dp[M];
int n,v,cnt;

int main()
{
    cin >> n >> v;
    for(int i = 1;i <= n;i++)
    {
        int s,vl,w;
        cin >> vl >> w >> s;
        int res = 1;
        while(s >= res)
        {
            cnt++;
            W[cnt] = res * w;
            V[cnt] = res * vl;
            s -= res;
            res *= 2;
        }
        if(s)
        {
            cnt++;
            W[cnt] = s * w;
            V[cnt] = s * vl;
        }
    }
    for(int i = 1;i <= cnt;i++)
    {
        for(int j = v;j >= V[i];j--)
        {
            dp[j] = max(dp[j],dp[j - V[i]] + W[i]);    
        }
    }
    cout << dp[v] << endl;
    
    return 0;
    
}

分组背包

例题:https://www.acwing.com/problem/content/9/

有 N 组物品和一个容量是 V 的背包。

每组物品有若干个，同一组内的物品最多只能选一个。
每件物品的体积是 vij，价值是 wij，其中 i 是组号，j 是组内编号。

求解将哪些物品装入背包，可使物品总体积不超过背包容量，且总价值最大。

输出最大价值。

输入格式
第一行有两个整数 N，V，用空格隔开，分别表示物品组数和背包容量。

接下来有 N 组数据：

每组数据第一行有一个整数 Si，表示第 i 个物品组的物品数量；
每组数据接下来有 Si 行，每行有两个整数 vij,wij，用空格隔开，分别表示第 i 个物品组的第 j 个物品的体积和价值；
输出格式
输出一个整数，表示最大价值。

数据范围
0<N,V≤100
0<Si≤100
0<vij,wij≤100
输入样例
3 5
2
1 2
2 4
1
3 4
1
4 5
输出样例：
8

二维朴素
#include <iostream>
#include <cstring>
#include <algorithm>
using namespace std;
const int N = 110;
int V[N][N],W[N][N],dp[N][N];
int S[N];
int n,v;

int main()
{
    cin >> n >> v;
    for(int i = 1;i <= n;i++)
    {
        int s;
        cin >> s;
        S[i] = s;
        for(int j = 1;j <= s;j++)
        {
            int a,b;
            cin >> a >> b;
            V[i][j] = a;
            W[i][j] = b;
        }
    }
    
    for(int i = 1;i <= n;i++)
    {
        for(int j = 0;j <= v;j++)
        {
            dp[i][j] = dp[i - 1][j];
            for(int k = 1;k <= S[i];k++)
            {
                
                if(j >= V[i][k]) dp[i][j] = max(dp[i][j],dp[i - 1][j - V[i][k]] + W[i][k]);
                
            }
        }
    }
    
    cout << dp[n][v] << endl;
    
    return 0;
}

一维优化
#include <iostream>
#include <cstring>
#include <algorithm>
using namespace std;
const int N = 110;
int V[N],W[N],dp[N];
int n,v;

int main()
{
    cin >> n >> v;
    for(int i = 1;i <= n;i++)
    {
        int s;
        cin >> s;
        for(int j = 1;j <= s;j++)
        {
            cin >> V[j] >> W[j];
        }
        for(int j = v;j >= 0;j--)
        {
            for(int k = 1;k <= s;k++)
            {
                if(j >= V[k]) dp[j] = max(dp[j],dp[j - V[k]] + W[k]);
            }
        }
    }
    
    
    
    cout << dp[v] << endl;
    
    return 0;
}

算法核心:
二维ij表示前i组体积为j时可以获得的最大价值
一维j表示体积为j时可以获得的最大价值