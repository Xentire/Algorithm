蒙德里安的梦想

例题;https://www.acwing.com/problem/content/293/

求把 N×M 的棋盘分割成若干个 1×2 的长方形，有多少种方案。

例如当 N=2，M=4 时，共有 5 种方案。当 N=2，M=3 时，共有 3 种方案。

输入格式
输入包含多组测试用例。

每组测试用例占一行，包含两个整数 N 和 M。

当输入用例 N=0，M=0 时，表示输入终止，且该用例无需处理。

输出格式
每个测试用例输出一个结果，每个结果占一行。

数据范围
1≤N,M≤11
输入样例：
1 2
1 3
1 4
2 2
2 3
2 4
2 11
4 11
0 0
输出样例：
1
0
1
2
3
5
144
51205

#include <iostream>
#include <cstring>
#include <algorithm>
#include <vector>
using namespace std;
const int N = 15,M = 1 << N;
typedef long long LL;
bool st[M];
LL dp[N][M];
vector<int> state[M];
int n,m;

int main()
{
    while(cin >> n >> m,n || m)
    {
        for(int i = 0;i < 1 << n;i++)
        {
            int cnt = 0;
            bool isValid = true;
            for(int j = 0;j < n;j++)
            {
                if(i >> j & 1)
                {
                    if(cnt & 1)    
                        isValid = false;
                    cnt = 0;
                }
                else cnt++;
            }
            if(cnt % 2) isValid = false;
            st[i] = isValid;
        }
        for(int i = 0;i < 1 << n;i++)
        {
            state[i].clear();
            for(int j = 0;j < 1 << n;j++)
            {
                if(!(i & j) && st[i | j])
                {
                    state[i].push_back(j);
                }
            }
            
        }
        memset(dp,0,sizeof dp);
        dp[0][0] = 1;
        for(int i = 1;i <= m;i++)
        {
            for(int j = 0;j < 1 << n;j++)
            {
                for(auto k : state[j])
                {
                    dp[i][j] += dp[i - 1][k];
                }
            }
        }
        cout << dp[m][0] << endl; 
    }
    return 0;
}

算法核心:
状态压缩dp的核心就是用二进制表示状态  
即枚举二进制数 01010011 其中为1的地方就是上一列横着放的从上一列伸展出来到这一列的方块数  此状态是不合法的因为有奇数个0  空余格子必须是偶数
dp[i][j] 
状态集合:i表示前i-1列已经摆好且从i-1列伸出来到第i列的状态是j的方案集合
状态属性:前i-1列全都摆好且从i-1列伸展出来到第i列的状态是j的所有方案数之和
状态表示 dp[i][j] = dp[i - 1][k] k表示的是合法的可以与状态j匹配的方案数

摆方块时先摆横着的 竖着的就已经确定了 直接塞进去就行了
先处理所有合法的方案数
①首先要满足的条件就是横着的摆好后剩下的格子够摆竖着的 也就是空余各自需要是偶数
即预处理st数组 st[i]表示的是i这种状态是否合法 合法为true非法为false
②第二个要满足的条件就是不冲突 即i 和 j两种状态可以匹配上
可以预处理二维数组state  state的一维state[j]存储的是所有可以与j合法匹配的k状态
当 i & j 为0时表示此时无冲突 因为冲突的话 就代表着上一列和这一列同时在某行有方块伸展出来
此时 i & j 不为0
st[i | j] 其中 i | j 表示的是i - 1列的状态 因为 i 是从 i - 2列伸展出来到第 i 列的状态
而 j 是从i - 1列伸展出来到第 i 列的状态 即 i | j 就表示在第 i - 1 列的状态 
例如 i = 1001001 j = 0010100   i | j = 10101101 
此时 i | j 的状态就是 第1 3 5 6 8行有方块 此时判断它的st是否合法

若是①②都满足的话说明 i 可以和 j 匹配 将 j 放入state[i]中

最短Hamilton路径

例题:https://www.acwing.com/problem/content/93/

给定一张 n 个点的带权无向图，点从 0∼n−1 标号，求起点 0 到终点 n−1 的最短 Hamilton 路径。

Hamilton 路径的定义是从 0 到 n−1 不重不漏地经过每个点恰好一次。

输入格式
第一行输入整数 n。

接下来 n 行每行 n 个整数，其中第 i 行第 j 个整数表示点 i 到 j 的距离（记为 a[i,j]）。

对于任意的 x,y,z，数据保证 a[x,x]=0，a[x,y]=a[y,x] 并且 a[x,y]+a[y,z]≥a[x,z]。

输出格式
输出一个整数，表示最短 Hamilton 路径的长度。

数据范围
1≤n≤20
0≤a[i,j]≤107
输入样例：
5
0 2 4 5 1
2 0 6 5 3
4 6 0 8 3
5 5 8 0 5
1 3 3 5 0
输出样例：
18

#include <iostream>
#include <cstring>
#include <algorithm>
using namespace std;
const int N = 20,M = 1 << N;
int g[N][N],dp[M][N];
int n;

int main()
{
    cin >> n;
    for(int i = 0;i < n;i++)
    {
        for(int j = 0;j < n;j++) cin >> g[i][j];
    }
    memset(dp,0x3f,sizeof dp);
    //for(int i = 0;i < n;i++) dp[1 << i][i] = 0;
    dp[1][0] = 0;
    for(int i = 0;i < 1 << n;i++)
    {
        for(int j = 0;j < n;j++)
        {
            if(i >> j & 1)
            {
                for(int k = 0;k < n;k++)
                {
                    if(i >> k & 1)
                        dp[i][j] = min(dp[i][j],dp[i - (1 << j)][k] + g[k][j]);
                }
            }
        }
    }
   
    cout << dp[(1 << n) - 1][n - 1] << endl;
    
    return 0;
}

算法核心:
dp[i][j]
状态集合:已经走过的点是 i 且最后一个经过的点是 j 的所有路径的集合
状态属性:已经走过的点的状态是i且最后一个经过的点是j的所有路径的权值和的最小值

初始化的时候dp只能将[1][0]初始化为0 因为题意是只能从0号点出发 从其它点出发都是不合法的
不能初始化其它点
先枚举所有的状态i  然后枚举所有的尾点 然后枚举倒数第二个点
其中尾点和倒数第二个点都必须在 i 的状态里 i 可以使用二进制来表示是否选点 1 表示选了这个点 0表示没选
最后输出dp[(1 << n) - 1][n - 1] 表示所有的点都遍历到了 且最后一个点是n - 1