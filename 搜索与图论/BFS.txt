BFS

例题:https://www.acwing.com/problem/content/846/

给定一个 n×m 的二维整数数组，用来表示一个迷宫，数组中只包含 0 或 1，其中 0 表示可以走的路，1 表示不可通过的墙壁。

最初，有一个人位于左上角 (1,1) 处，已知该人每次可以向上、下、左、右任意一个方向移动一个位置。

请问，该人从左上角移动至右下角 (n,m) 处，至少需要移动多少次。

数据保证 (1,1) 处和 (n,m) 处的数字为 0，且一定至少存在一条通路。

输入格式
第一行包含两个整数 n 和 m。

接下来 n 行，每行包含 m 个整数（0 或 1），表示完整的二维数组迷宫。

输出格式
输出一个整数，表示从左上角移动至右下角的最少移动次数。

数据范围
1≤n,m≤100
输入样例：
5 5
0 1 0 0 0
0 1 0 1 0
0 0 0 0 0
0 1 1 1 0
0 0 0 1 0
输出样例：
8

#include <iostream>
#include <algorithm>
#include <cstring>
using namespace std;
const int N = 110;
typedef pair<int,int> PII;
#define x first
#define y second
int arr[N][N],d[N][N];
PII q[N * N];
int hh,tt = -1;
int n,m;
int dx[4] = {0,-1,0,1},dy[4] = {-1,0,1,0};
void bfs(int sx,int sy)
{
    memset(d,-1,sizeof d);
    q[++tt] = {sx,sy};
    d[sx][sy] = 0;
    while(hh <= tt)
    {
        auto t = q[hh++];
        for(int i = 0;i < 4;i++)
        {
            int nx = t.x + dx[i];
            int ny = t.y + dy[i];
            if(nx >= 1 && ny >= 1 && nx <= n && ny <= m && d[nx][ny] == -1 && arr[nx][ny] == 0)
            {
                d[nx][ny] = d[t.x][t.y] + 1;
                if(nx == n && ny == m) return;
                q[++tt] = {nx,ny};
            }
        }
    }
}

int main()
{
    cin >> n >> m;
    for(int i = 1;i <= n;i++)
    {
        for(int j = 1;j <= m;j++) cin >> arr[i][j];
    }
    bfs(1,1);    
    cout << d[n][m] << endl;
    return 0;
}

八数码字符串升维

例题:https://www.acwing.com/problem/content/description/847/

在一个 3×3 的网格中，1∼8 这 8 个数字和一个 x 恰好不重不漏地分布在这 3×3 的网格中。

例如：

1 2 3
x 4 6
7 5 8
在游戏过程中，可以把 x 与其上、下、左、右四个方向之一的数字交换（如果存在）。

我们的目的是通过交换，使得网格变为如下排列（称为正确排列）：

1 2 3
4 5 6
7 8 x
例如，示例中图形就可以通过让 x 先后与右、下、右三个方向的数字交换成功得到正确排列。

交换过程如下：

1 2 3   1 2 3   1 2 3   1 2 3
x 4 6   4 x 6   4 5 6   4 5 6
7 5 8   7 5 8   7 x 8   7 8 x
现在，给你一个初始网格，请你求出得到正确排列至少需要进行多少次交换。

输入格式
输入占一行，将 3×3 的初始网格描绘出来。

例如，如果初始网格如下所示：

1 2 3 
x 4 6 
7 5 8 
则输入为：1 2 3 x 4 6 7 5 8

输出格式
输出占一行，包含一个整数，表示最少交换次数。

如果不存在解决方案，则输出 −1。

输入样例：
2 3 4 1 5 x 7 6 8
输出样例
19

#include <iostream>
#include <queue>
#include <algorithm>
#include <cstring>
#include <unordered_map>
#include <string>
using namespace std;
string endst = "12345678x";
string start;
unordered_map<string,int> dist;
int dx[4] = {0,0,1,-1},dy[4] = {1,-1,0,0};
queue<string> q;

int bfs(string start)
{
    dist[start] = 0;
    q.push(start);
    while(q.size())
    {
        auto t = q.front();
        q.pop();
        int pos = t.find("x");
        if(t == endst) return dist[t];
        int x = pos / 3;
        int y = pos % 3;
        int dis = dist[t];
        for(int i = 0;i < 4;i++)
        {
            int nx = x + dx[i],ny = y + dy[i];
            if(nx >= 0 && ny >= 0 && nx < 3 && ny < 3)
            {
                int index = nx * 3 + ny;
                swap(t[index],t[pos]);
                if(!dist.count(t))
                {
                    dist[t] = dis + 1;
                    q.push(t);
                }
                swap(t[index],t[pos]);
            }
        }
    }
    return -1;
}
int main()
{
    for(int i = 0;i < 9;i++)
    {
        char c;
        cin >> c;
        start += c;
    }
    cout << bfs(start);
    
    
    
    return 0;
}

算法核心:
将一维字符串的下标索引转化为二维关键点就是理解如何/和%的用法
/可以将下标转化为x %可以将下标转化为y

图的BFS

例题:https://www.acwing.com/problem/content/description/849/

给定一个 n 个点 m 条边的有向图，图中可能存在重边和自环。

所有边的长度都是 1，点的编号为 1∼n。

请你求出 1 号点到 n 号点的最短距离，如果从 1 号点无法走到 n 号点，输出 −1。

输入格式
第一行包含两个整数 n 和 m。

接下来 m 行，每行包含两个整数 a 和 b，表示存在一条从 a 走到 b 的长度为 1 的边。

输出格式
输出一个整数，表示 1 号点到 n 号点的最短距离。

数据范围
1≤n,m≤105
输入样例：
4 5
1 2
2 3
3 4
1 3
1 4
输出样例：
1

#include<iostream>
#include<algorithm>
#include<cstring>
#include<queue>
using namespace std;
const int N = 1e5 + 10;
int n,m;
int e[N],h[N],ne[N],idx;
queue<int> q;
int dist[N];


int bfs(int start)
{
    q.push(start);
    dist[start] = 0;

    while(q.size())
    {
        auto t = q.front();
        q.pop();

        if(t == n) return dist[t];

        for(int i = h[t];i != -1;i = ne[i])
        {
            int j = e[i];
            if(dist[j] != -1) continue;
            dist[j] = dist[t] + 1;
            q.push(j);
        }
    }


    return -1;
}

void add(int a,int b)
{
    e[idx] = b,ne[idx] = h[a],h[a] = idx++;
}

int main()
{
    cin >> n >> m;
    memset(h,-1,sizeof h);
    memset(dist,-1,sizeof dist);
    for(int i = 1;i <= m;i++)
    {
        int a,b;
        cin >> a >> b;
        if(a == b) continue;//处理自环
        add(a,b);
    }


    cout << bfs(1) << endl;

    return 0;
}

算法核心:
//本题关键点 dfs(i) i传入的是一个节点而不是边
q队列存放的也是节点 dist[i]是指从1号节点到i号节点的最短路径所以dist的索引也是节点  
但是for循环遍历以t为起点的边的时候 i存储的是边  所以改变dist和将节点入队的时候要使用i边的终点e[i] e[]存的才是节点