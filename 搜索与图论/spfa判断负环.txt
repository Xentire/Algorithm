判断是否存在负环

例题:https://www.acwing.com/problem/content/854/

给定一个 n 个点 m 条边的有向图，图中可能存在重边和自环， 边权可能为负数。

请你判断图中是否存在负权回路。

输入格式
第一行包含整数 n 和 m。

接下来 m 行每行包含三个整数 x,y,z，表示存在一条从点 x 到点 y 的有向边，边长为 z。

输出格式
如果图中存在负权回路，则输出 Yes，否则输出 No。

数据范围
1≤n≤2000,
1≤m≤10000,
图中涉及边长绝对值均不超过 10000。

输入样例：
3 3
1 2 -1
2 3 4
3 1 -4
输出样例：
Yes

#include <iostream>
#include <queue>
#include <algorithm>
#include <cstring>
using namespace std;
const int N = 2010,M = 10010;
int dist[N],cnt[N],ne[M],e[M],h[N],idx,w[M],n,m;
bool st[N];
void add(int a,int b,int c)
{
    e[idx] = b,ne[idx] = h[a],w[idx] = c,h[a] = idx++;
}

bool spfa()
{
    queue<int> q;
    for(int i = 1;i <= n;i++)
    {
        q.push(i);
        st[i] = true;
    }
    while(q.size())
    {
        int t = q.front();
        q.pop();
        st[t] = false;
        for(int i = h[t];i != -1;i = ne[i])
        {
            int j = e[i];
            if(dist[j] > dist[t] + w[i])
            {
                cnt[j] = cnt[t] + 1;
                if(cnt[j] > n - 1) return true;
                dist[j] = dist[t] + w[i];
                if(!st[j])
                {
                    q.push(j);
                    st[j] = true;
                }
            }
        }
    }
    return false;
}

int main()
{
    cin >> n >> m;
    memset(h,-1,sizeof h);
    while(m--)
    {
        int x,y,z;
        cin >> x >> y >> z;
        add(x,y,z);
    }
    if(spfa()) cout << "Yes" << endl;
    else cout << "No" << endl;
    
    return 0;
}

算法核心:
因为此题是为了判断是否存在负环 所以dist数组要不要初始化都没有太大关系
当存在负环的时候循环会一直执行 因为每执行一次都会使得 dist变小 cnt数组也会一直变大 当cnt > n - 1的时候说明某条路径上的点数超过了n - 1此时可以判断有一个点一定出现了两次及以上 所以存在负环

初始将所有点都入队是防止不是连通图 并且可能从某个点到另外一个点的最短路径不会经过负环 但是存在负环 将所有点都入队就不用担心不会经过负环 因为一但接触负环就会一直循环下去