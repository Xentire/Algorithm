边权为正(稠密图)dijkstra

例题:https://www.acwing.com/problem/content/851/

给定一个 n 个点 m 条边的有向图，图中可能存在重边和自环，所有边权均为正值。

请你求出 1 号点到 n 号点的最短距离，如果无法从 1 号点走到 n 号点，则输出 −1。

输入格式
第一行包含整数 n 和 m。

接下来 m 行每行包含三个整数 x,y,z，表示存在一条从点 x 到点 y 的有向边，边长为 z。

输出格式
输出一个整数，表示 1 号点到 n 号点的最短距离。

如果路径不存在，则输出 −1。

数据范围
1≤n≤500,
1≤m≤105,
图中涉及边长均不超过10000。

输入样例：
3 3
1 2 2
2 3 1
1 3 4
输出样例：
3

#include<iostream>
#include<algorithm>
#include<cstring>
using namespace std;
const int N = 510;
int INF = 0x3f3f3f3f;
int g[N][N];
int n,m;
int dist[N];//dist存储的是由节点1到节点i的当前最短路径
int st[N];//st数组存储每个节点的状态 看是否已经找到最短路
int Dijkstra()
{
    memset(dist,0x3f,sizeof dist);
    dist[1] = 0;
    for(int i = 0;i < n - 1;i++)
    {
        int t = -1;
        for(int j = 1;j <= n;j++)
            if(!st[j] && (t == -1 || dist[t] > dist[j]))
                t = j;

        st[t] = true;
        for(int j = 1;j <= n;j++)
            dist[j] = min(dist[t] + g[t][j],dist[j]);
    }

    if(dist[n] == INF) return -1;
    else return dist[n];

}


int main()
{
    ios::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);

    cin >> n >> m;
    memset(g,0x3f,sizeof g);
    while(m--)
    {
        int x,y,w;
        cin >> x >> y >> w;
        g[x][y] = min(g[x][y],w);
    }

    for(int i = 0;i < N;i++) g[i][i] = 0;

    cout << Dijkstra() << endl;

    return 0;
}

算法核心:
注意s集合 是已经确定了最短路的节点集合 源点一开始不在s集合中 所以需要从1开始遍历 以便于将源点加入s集合 来更新其他的路径



边权为正(稀疏图)堆优化dijkstra

例题:https://www.acwing.com/problem/content/description/852/

给定一个 n 个点 m 条边的有向图，图中可能存在重边和自环，所有边权均为非负值。

请你求出 1 号点到 n 号点的最短距离，如果无法从 1 号点走到 n 号点，则输出 −1。

输入格式
第一行包含整数 n 和 m。

接下来 m 行每行包含三个整数 x,y,z，表示存在一条从点 x 到点 y 的有向边，边长为 z。

输出格式
输出一个整数，表示 1 号点到 n 号点的最短距离。

如果路径不存在，则输出 −1。

数据范围
1≤n,m≤1.5×105,
图中涉及边长均不小于 0，且不超过 10000。
数据保证：如果最短路存在，则最短路的长度不超过 109。

输入样例：
3 3
1 2 2
2 3 1
1 3 4
输出样例：
3

#include<iostream>
#include<algorithm>
#include<cstring>
#include<queue>
using namespace std;
const int N = 2e5;
typedef pair<int,int> PII;
int h[N],e[N],ne[N],w[N],idx;
int dist[N];
int st[N];
int n,m;
priority_queue<PII,vector<PII>,greater<PII>>heap;

void add(int a,int b,int weight)
{
    e[idx] = b,ne[idx] = h[a],w[idx] = weight,h[a] = idx++;
}

int Dijkstra()
{
    memset(dist,0x3f,sizeof dist);
    heap.push({0,1});
    dist[1] = 0;

    while(heap.size())
    {
        auto t = heap.top();
        heap.pop();

        int x = t.first,y = t.second;

        if(st[y]) continue;
        st[y] = true;

        for(int i = h[y];i != -1;i = ne[i])
        {
            int j = e[i];
            if(dist[j] > dist[y] + w[i])
            {
                dist[j] = dist[y] + w[i];
                heap.push({dist[j],j});
            }
        }
    }

    if(dist[n] == 0x3f3f3f3f) return -1;
    else return dist[n];

}


int main()
{
    ios::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
    memset(h,-1,sizeof h);
    cin >> n >> m;

    while(m--)
    {
        int x,y,w;
        cin >> x >> y >> w;
        add(x,y,w);
    }
    cout << Dijkstra() << endl;;
    return 0;
}

算法核心:
优先队列的first存的是1号节点到此节点的距离 second存的是此节点的编号
使用优先队列也就是堆可以来维护一个小根堆 使得可以在很短时间内获得距离1号节点最近的节点
然后将此节点加入到已经确定了最短路径的节点集当中
用新加入的节点来更新到其他节点的距离


边权为负(限制选边的数量)Bellman_Ford算法

例题:https://www.acwing.com/problem/content/855/

给定一个 n 个点 m 条边的有向图，图中可能存在重边和自环， 边权可能为负数。

请你求出从 1 号点到 n 号点的最多经过 k 条边的最短距离，如果无法从 1 号点走到 n 号点，输出 impossible。

注意：图中可能 存在负权回路 。

输入格式
第一行包含三个整数 n,m,k。

接下来 m 行，每行包含三个整数 x,y,z，表示存在一条从点 x 到点 y 的有向边，边长为 z。

点的编号为 1∼n。

输出格式
输出一个整数，表示从 1 号点到 n 号点的最多经过 k 条边的最短距离。

如果不存在满足条件的路径，则输出 impossible。

数据范围
1≤n,k≤500,
1≤m≤10000,
1≤x,y≤n，
任意边长的绝对值不超过 10000。

输入样例：
3 3 1
1 2 1
2 3 1
1 3 3
输出样例：
3

#include <iostream>
#include <algorithm>
#include <cstring>
using namespace std;
const int N = 510,M = 1e4 + 10;
int dist[N],backup[N];
#define null 0x3f3f3f3f
int n,m,k;
struct Edge
{
    int a,b,w;
}edge[M];
void Bellman_Ford()
{
    memset(dist,0x3f,sizeof dist);
    dist[1] = 0;
    for(int i = 1;i <= k;i++)
    {
        memcpy(backup,dist,sizeof dist);
        for(int i = 1;i <= m;i++)
        {
            auto e = edge[i];
            dist[e.b] = min(dist[e.b],backup[e.a] + e.w);
        }
    }
}
int main()
{
    cin >> n >> m >> k;
    memset(dist,0x3f,sizeof dist);
    for(int i = 1;i <= m;i++)
    {
        int a,b,c;
        cin >> a >> b >> c;
        edge[i] = {a,b,c};
    }
    Bellman_Ford();
    if(dist[n] > null / 2) cout << "impossible" << endl;
    else cout << dist[n] << endl;
    return 0;
}

算法核心:
需要限制边数的最大值
一共循环k次 即可限制边数
但是又要防止串联的发生 
即防止刚更新了一个节点又拿这个节点去更新其他节点了 所以要维护一个数组来保存上一次迭代的结果
每次拿上一次迭代的结果来更新就不会发生一次循环增加多条边的情况 


边权存在负数(spfa)

例题:https://www.acwing.com/problem/content/description/853/

给定一个 n 个点 m 条边的有向图，图中可能存在重边和自环， 边权可能为负数。

请你求出 1 号点到 n 号点的最短距离，如果无法从 1 号点走到 n 号点，则输出 impossible。

数据保证不存在负权回路。

输入格式
第一行包含整数 n 和 m。

接下来 m 行每行包含三个整数 x,y,z，表示存在一条从点 x 到点 y 的有向边，边长为 z。

输出格式
输出一个整数，表示 1 号点到 n 号点的最短距离。

如果路径不存在，则输出 impossible。

数据范围
1≤n,m≤105,
图中涉及边长绝对值均不超过 10000。

输入样例：
3 3
1 2 5
2 3 -3
1 3 4
输出样例：
2

#include <iostream>
#include <queue>
#include <cstring>
#include <algorithm>
using namespace std;
const int N = 1e5 + 10;
int n,m,dist[N],ne[N],e[N],h[N],idx,w[N];
bool st[N];
#define null 0x3f3f3f3f
queue<int> q;
void add(int a,int b,int c)
{
    e[idx] = b,ne[idx] = h[a],w[idx] = c,h[a] = idx++;
}
void spfa()
{
    memset(dist,0x3f,sizeof dist);
    dist[1] = 0;
    st[1] = true;
    q.push(1);
    while(q.size())
    {
        int t = q.front();
        q.pop();
        st[t] = false;
        for(int i = h[t];i != -1;i = ne[i])
        {
            int j = e[i];
            if(dist[j] > dist[t] + w[i])
            {
                dist[j] = dist[t] + w[i];
                if(!st[j])
                {
                    st[j] = true;
                    q.push(j);
                }
            }
        }
    }
}

int main()
{
    cin >> n >> m;
    memset(h,-1,sizeof h);
    for(int i = 1;i <= m;i++)
    {
        int x,y,z;
        cin >> x >> y >> z;
        if(x == y) continue;
        add(x,y,z);
    }
    spfa();
    if(dist[n] == null) cout << "impossible" << endl;
    else cout << dist[n] << endl;
    return 0;
}

算法核心:
通过反复入队比较
只要产生了更短的一条路就将其拿来更新其他点
因为此最短路的更新过程是按照拓扑顺序 所以不用判断dist[n] > null / 2