求组合数Ⅰ(数据范围1≤n≤10000,  1≤b≤a≤2000)

例题:https://www.acwing.com/problem/content/887/

给定 n 组询问，每组询问给定两个整数 a，b，请你输出 Cbamod(109+7) 的值。

输入格式
第一行包含整数 n。

接下来 n 行，每行包含一组 a 和 b。

输出格式
共 n 行，每行输出一个询问的解。

数据范围
1≤n≤10000,
1≤b≤a≤2000
输入样例：
3
3 1
5 3
2 2
输出样例：
3
10
1

#include <iostream>
#include <algorithm>
#include <cstring>
using namespace std;
const int N = 2010,MOD = 1e9 + 7;
int arr[N][N];
int n;
void init()
{
    for(int i = 0;i < N;i++)
    {
        for(int j = 0;j <= i;j++)
        {
            if(!j) arr[i][j] = 1;
            else arr[i][j] = (arr[i - 1][j] + arr[i - 1][j - 1]) % MOD;
        }
    }
}

int main()
{
    cin >> n;
    init();
    while(n--)
    {
        int a,b;
        cin >> a >> b;
        cout << arr[a][b] << endl;
    }
    
    
    return 0; 
}

算法核心:
因为a和b的数值不大最高只有2000，可以直接预处理出来组合数数组

求组合数Ⅱ(数据范围1≤n≤10000 ,1≤b≤a≤105)

例题:https://www.acwing.com/problem/content/888/

给定 n 组询问，每组询问给定两个整数 a，b，请你输出 Cbamod(109+7) 的值。

输入格式
第一行包含整数 n。

接下来 n 行，每行包含一组 a 和 b。

输出格式
共 n 行，每行输出一个询问的解。

数据范围
1≤n≤10000,
1≤b≤a≤105
输入样例：
3
3 1
5 3
2 2
输出样例：
3
10
1

#include <iostream>
#include <algorithm>
#include <cstring>
using namespace std;
const int N = 1e5 + 10,MOD = 1e9 + 7;
int fact[N],infact[N];
int n;
typedef long long LL;
int qmi(int a,int b,int p)
{
    int res = 1;
    while(b)
    {
        if(b & 1) res = (LL)res * a % p;
        b >>= 1;
        a = (LL)a * a % p;
    }
    return res;
}

int main()
{
    cin >> n;
    fact[0] = 1,infact[0] = 1;
    for(int i = 1;i < N;i++)
    {
        fact[i] = (LL)fact[i - 1] * i % MOD;
        infact[i] = (LL)infact[i - 1] * qmi(i,MOD - 2,MOD) % MOD;
    }
    while(n--)
    {
        int a,b;
        cin >> a >> b;
        cout << (LL)fact[a] * infact[b] % MOD * infact[a - b] % MOD << endl;
    }
    
    
    
    return 0;
}

算法核心:
因为a和b的范围非常大 数据达到了1e5,而两重循环n^2的复杂度在1e5的数据下会超时所以不能用预处理组合数数组的方式来求
而且1e5的数据二维数组也会mle
可以预处理出阶乘数组，阶乘只需要一层循环就可以算出来
然后使用阶乘来求解组合数

组合数Ⅲ(数据范围1≤n≤20 ,1≤b≤a≤1018,1≤p≤105)

例题:https://www.acwing.com/problem/content/889/

给定 n 组询问，每组询问给定三个整数 a,b,p，其中 p 是质数，请你输出 Cbamodp 的值。

输入格式
第一行包含整数 n。

接下来 n 行，每行包含一组 a,b,p。

输出格式
共 n 行，每行输出一个询问的解。

数据范围
1≤n≤20,
1≤b≤a≤1018,
1≤p≤105,

输入样例：
3
5 3 7
3 1 5
6 4 13
输出样例：
3
3
2

#include <iostream>
#include <algorithm>
#include <cstring>
using namespace std;
typedef long long LL;

int qmi(int a,int b,int p)
{
    int res = 1;
    while(b)
    {
        if(b & 1) res = (LL)res * a % p;
        b >>= 1;
        a = (LL)a * a % p;
    }
    return res;
}

int C(int a,int b,int p)
{
    if(b > a) return 0;
    int res = 1;
    for(int i = 1,j = a;i <= b;i++,j--)
    {
        res = (LL)res * j % p;
        res = (LL)res * qmi(i,p - 2,p) % p;
    }
    return res;
}

int Lucas(LL a,LL b,int p)
{
    if(a < p && b < p) return C(a,b,p); 
    return (LL)Lucas(a / p,b / p,p) * C(a % p,b % p,p) % p;
}
int main()
{
    int n;
    cin >> n;
    while(n--)
    {
        LL a,b;
        int p;
        cin >> a >> b >> p;
        cout << Lucas(a,b,p) << endl;
    }
    return 0;
}

算法核心:
Lucas定理
Cab = C(a % p)(b % p) * C(a / p)(b / p)
此题因为a和b是long long类型 数据过大 不能再使用预处理阶乘来解决 故使用Lucas定理

组合数Ⅳ(数据范围1≤b≤a≤5000)

例题:https://www.acwing.com/problem/content/890/

输入 a,b，求 Cba 的值。

注意结果可能很大，需要使用高精度计算。

输入格式
共一行，包含两个整数 a 和 b。

输出格式
共一行，输出 Cba 的值。

数据范围
1≤b≤a≤5000
输入样例：
5 3
输出样例：
10

#include <iostream>
#include <cstring>
#include <algorithm>
#include <vector>
using namespace std;
const int N = 5010;
bool st[N];
int sum[N],primes[N],cnt;
int a,b;
void get_primes(int n)
{
    for(int i = 2;i <= n;i++)
    {
        if(!st[i]) primes[cnt++] = i;
        for(int j = 0;primes[j] <= n / i;j++)
        {
            st[primes[j] * i] = true;
            if(i % primes[j] == 0) break;
        }
    }
}
int get(int n,int p)
{
    int res = 0;
    while(n)
    {
        res += n / p;
        n /= p;
    }
    return res;
}
vector<int> mul(vector<int> a,int p)
{
    int t = 0;
    vector<int> res;
    for(int i = 0;i < a.size();i++)
    {
        t += p * a[i];
        res.push_back(t % 10);
        t /= 10;
    }
    while(t)
    {
        res.push_back(t % 10);
        t /= 10;
    }
    return res;
}
int main()
{
    cin >> a >> b;
    get_primes(a);
    for(int i = 0;i < cnt;i++)
    {
        int j = primes[i];
        sum[i] = get(a,j) - get(b,j) - get(a - b,j);
    }
    
    vector<int> vec;
    vec.push_back(1);
    for(int i = 0;i < cnt;i++)
    {
        for(int j = 0;j < sum[i];j++)
        {
            vec = mul(vec,primes[i]);
        }
    }
    
    for(int i = vec.size() - 1;i >= 0;i--)
        cout << vec[i];
    
    cout << endl;
    return 0;
}

算法核心:
此题不用模上一个数 所以在此数据范围内结果会非常大 故需要高精度算法来存储答案
一般的数组不模上一个小一点的数也不能存下阶乘或者是组合数
故只能使用质因数分解 将组合数的分子和分母的阶乘分解为质数
然后使用高精度来进行乘法和除法
又因为一次要写两个高精度算法很麻烦 所以可以将分子阶乘的质因数分解后减去分母阶乘质因数分解后
然后再用高精度乘法将所有质因数重新乘起来

卡特兰数

例题:https://www.acwing.com/problem/content/891/

给定 n 个 0 和 n 个 1，它们将按照某种顺序排成长度为 2n 的序列，求它们能排列成的所有序列中，能够满足任意前缀序列中 0 的个数都不少于 1 的个数的序列有多少个。

输出的答案对 109+7 取模。

输入格式
共一行，包含整数 n。

输出格式
共一行，包含一个整数，表示答案。

数据范围
1≤n≤105
输入样例：
3
输出样例：
5

#include <iostream>
#include <cstring>
#include <algorithm>
using namespace std;
typedef long long LL;
const int MOD = 1e9 + 7;
int n;
int qmi(int a,int b)
{
    int res = 1;
    while(b)
    {
        if(b & 1) res = (LL)res * a % MOD;
        b >>= 1;
        a = (LL)a * a % MOD;
    }
    return res;
}
int main()
{
    cin >> n;
    int a = 2 * n,b = n;
    int res = 1;
    for(int i = a;i >= a - b + 1;i--) res = (LL)res * i % MOD;
    for(int i = 1;i <= a - b;i++) res = (LL)res * qmi(i,MOD - 2) % MOD;
    res = (LL)res * qmi(n + 1,MOD - 2) % MOD;
    
    cout << res << endl;
    
    return 0;
}

算法核心:
卡特兰数:s = (n + 1) * C(2n,n)
卡特兰数用于解决不交叉问题
例如:
01序列 在任意前缀中 0的数量大于等于1的数量
括号匹配 任意前缀中左括号数大于等于右括号数
进栈出栈问题 