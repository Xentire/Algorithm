试除法求约数

例题:https://www.acwing.com/problem/content/871/

给定 n 个正整数 ai，对于每个整数 ai，请你按照从小到大的顺序输出它的所有约数。

输入格式
第一行包含整数 n。

接下来 n 行，每行包含一个整数 ai。

输出格式
输出共 n 行，其中第 i 行输出第 i 个整数 ai 的所有约数。

数据范围
1≤n≤100,
1≤ai≤2×109
输入样例：
2
6
8
输出样例：
1 2 3 6 
1 2 4 8 

#include <iostream>
#include <algorithm>
#include <cstring>
#include <vector>
using namespace std;
int n;
vector<int> get_divisors(int x)
{
    vector<int> res;
    for(int i = 1;i <= x / i;i++)
    {
        if(x % i == 0)
        {
            res.push_back(i);
            if(i != x / i) res.push_back(x / i);
        }
    }
    sort(res.begin(),res.end());
    return res;
}
int main()
{
    cin >> n;
    while(n--)
    {
        int x;
        cin >> x;
        auto res = get_divisors(x);
        for(auto it : res)
        {
            cout << it << " ";
        }
        cout << endl;
    }
    return 0;
}

约数个数

例题:https://www.acwing.com/problem/content/872/

给定 n 个正整数 ai，请你输出这些数的乘积的约数个数，答案对 109+7 取模。

输入格式
第一行包含整数 n。

接下来 n 行，每行包含一个整数 ai。

输出格式
输出一个整数，表示所给正整数的乘积的约数个数，答案需对 109+7 取模。

数据范围
1≤n≤100,
1≤ai≤2×109
输入样例：
3
2
6
8
输出样例：
12

#include <iostream>
#include <algorithm>
#include <unordered_map>
#include <vector>

using namespace std;

typedef long long LL;

const int mod = 1e9 + 7;

int main()
{
    int n;
    cin >> n;

    unordered_map<int, int> primes;

    while (n -- )
    {
        int x;
        cin >> x;

        for (int i = 2; i <= x / i; i ++ )
            while (x % i == 0)
            {
                x /= i;
                primes[i] ++ ;
            }

        if (x > 1) primes[x] ++ ;
    }

    LL res = 1;
    for (auto p : primes) res = res * (p.second + 1) % mod;

    cout << res << endl;

    return 0;
}

算法核心:
一个数的约数个数等于其分解质因数之后的组合数
例如12 = 2^2 * 3 则其约数个数为 num = (2 + 1) * (1 + 1) = 6个 分别是1 2 3 4 6 12
分解质因数后 2可以不选也可以选择一个或者两个 3可以不选也可以选择一个 也就是三选一和二选一相乘得到结果为6

约数之和

例题:https://www.acwing.com/problem/content/873/

给定 n 个正整数 ai，请你输出这些数的乘积的约数之和，答案对 109+7 取模。

输入格式
第一行包含整数 n。

接下来 n 行，每行包含一个整数 ai。

输出格式
输出一个整数，表示所给正整数的乘积的约数之和，答案需对 109+7 取模。

数据范围
1≤n≤100,
1≤ai≤2×109
输入样例：
3
2
6
8
输出样例：
252

#include <iostream>
#include <algorithm>
#include <cstring>
#include <unordered_map>
using namespace std;
typedef long long LL;
const int MOD = 1e9 + 7;
unordered_map<int,int> hashmp;
int n;
int main()
{
    cin >> n;
    while(n--)
    {
        int x;
        cin >> x;
        for(int i = 2;i <= x / i;i++)
        {
            while(x % i == 0) hashmp[i]++,x /= i;
        }
        if(x > 1) hashmp[x]++;
    }
    LL ans = 1;
    for(auto it : hashmp)
    {
        LL sum = 1;
        for(int i = 1;i <= it.second;i++) sum = (sum * it.first + 1) % MOD;
        ans = (ans * sum) % MOD;
    }
    cout << ans << endl;
    
    return 0;
}

算法核心:
约数之和即是所有质因数的的各自累加再相乘例如12 = 2 * 2 * 3 其所有约数之和num = (2^0 + 2^1 + 2^2) * (3^0 + 3^1) = 28
12的所有约数1 2 3 4 6 12相加的28

最大公约数(欧几里得算法)

例题:https://www.acwing.com/problem/content/874/

给定 n 对正整数 ai,bi，请你求出每对数的最大公约数。

输入格式
第一行包含整数 n。

接下来 n 行，每行包含一个整数对 ai,bi。

输出格式
输出共 n 行，每行输出一个整数对的最大公约数。

数据范围
1≤n≤105,
1≤ai,bi≤2×109
输入样例：
2
3 6
4 6
输出样例：
3
2

#include <iostream>
#include <algorithm>
#include <cstring>
using namespace std;
int gcd(int a,int b)
{
    return b ? gcd(b,a % b) : a;
}
int main()
{
    int n;
    cin >> n;
    while(n--)
    {
        int a,b;
        cin >> a >> b;
        cout << gcd(a,b) << endl;
    }
    return 0;
} 