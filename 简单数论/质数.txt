试除法判断质数

例题:https://www.acwing.com/problem/content/868/

给定 n
 个正整数 ai
，判定每个数是否是质数。

输入格式
第一行包含整数 n
。

接下来 n
 行，每行包含一个正整数 ai
。

输出格式
共 n
 行，其中第 i
 行输出第 i
 个正整数 ai
 是否为质数，是则输出 Yes，否则输出 No。

数据范围
1≤n≤100
,
1≤ai≤231−1

输入样例：
2
2
6
输出样例：
Yes
No

#include <iostream>
#include <algorithm>
#include <cstring>
using namespace std;
int n;
bool check(int x)
{
    if(x < 2) return false;
    for(int i = 2;i <= x / i;i++)
    {
        if(x % i == 0) return false;
    }
    
    return true;
}
int main()
{
    cin >> n;
    while(n--)
    {
        int x;
        cin >> x;
        if(check(x)) cout << "Yes" << endl;
        else cout << "No" << endl;
    }
    
    return 0;
}

分解质因数

例题:https://www.acwing.com/activity/content/problem/content/936/

给定 n
 个正整数 ai
，将每个数分解质因数，并按照质因数从小到大的顺序输出每个质因数的底数和指数。

输入格式
第一行包含整数 n
。

接下来 n
 行，每行包含一个正整数 ai
。

输出格式
对于每个正整数 ai
，按照从小到大的顺序输出其分解质因数后，每个质因数的底数和指数，每个底数和指数占一行。

每个正整数的质因数全部输出完毕后，输出一个空行。

数据范围
1≤n≤100
,
2≤ai≤2×109

输入样例：
2
6
8
输出样例：
2 1
3 1

2 3

#include <iostream>
#include <algorithm>
#include <cstring>
using namespace std;
int n;

void Divsor(int x)
{
    for(int i = 2;i <= x / i;i++)
    {
        if(x % i == 0)
        {
            int res = 0;
            while(x % i == 0) 
            {
                x /= i;
                res++;
            }
            cout << i << " " << res << endl;
            
        }
    }
    if(x > 1) cout << x << " " << 1 << endl;

}
int main()
{
   cin >> n;
   while(n--)
   {
        int x;
        cin >> x;
        Divsor(x);
        cout << endl;
   }
    
    return 0;
}

算法核心:
0.质数=素数,因数=约数
1.质因子: 能整除给定正整数的质数
2.每个合数都可以写成几个质数相乘的形式 x=p1*p2*...*pn
3.质因子如重复可以用指数表示
4.质数:只有一个质因子的正整数,质数>=2
5.1没有质因子

筛质数

埃氏筛法

例题:https://www.acwing.com/problem/content/description/870/

给定一个正整数 n
，请你求出 1∼n
 中质数的个数。

输入格式
共一行，包含整数 n
。

输出格式
共一行，包含一个整数，表示 1∼n
 中质数的个数。

数据范围
1≤n≤106

输入样例：
8
输出样例：
4

#include <iostream>
#include <algorithm>
#include <cstring>
using namespace std;
const int N = 1e6 + 10;
int n,cnt;
int primes[N];
bool st[N];
void get_primes(int x)
{
    for(int i = 2;i <= x;i++)
    {
        if(st[i]) continue;
        primes[cnt++] = i;
        for(int j = i + i;j <= x;j += i)
            st[j] = true;    
    }
}

int main()
{
    cin >> n;    
    get_primes(n);
    
    cout << cnt << endl;
    return 0;
}

线性筛法

#include <iostream>
#include <algorithm>
#include <cstring>
using namespace std;
const int N = 1e6 + 10;
bool st[N];
int primes[N],n,cnt;

void get_primes(int x)
{
    for(int i = 2;i <= x;i++)
    {
        if(!st[i]) primes[cnt++] = i;
        for(int j = 0;primes[j] <= n / i;j++)
        {
            st[primes[j] * i] = true;
            if(i % primes[j] == 0) break;
        }
    }
}

int main()
{
    cin >> n;
    get_primes(n);
    cout << cnt << endl;
    return 0;
}

算法核心:
证明合数只会被其最小质因数筛掉
(1)当i % primes[j] != 0 时  此时还未遍历 到i的最小质因数所以 又因为i * primes[j] > i 所以primes[j] 是i * primes[j]的最小质因数
(2)当i % primes[j] == 0 时  刚好遍历到i的最小质因数 因此i * primes[j]的最小质因数也是primes[j]刚好可以筛掉然后跳出循环  避免重复筛选
    如果用primes[j + 1] * i 去筛选合数 此时primes[j + 1] > primes[j] 就不是用的最小质因数了 因为i的最小质因数是primes[j]而不是primes[j + 1]  