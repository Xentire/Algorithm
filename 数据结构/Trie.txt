Trie

例题:https://www.acwing.com/problem/content/837/

维护一个字符串集合，支持两种操作：

I x 向集合中插入一个字符串 x；
Q x 询问一个字符串在集合中出现了多少次。
共有 N 个操作，所有输入的字符串总长度不超过 105，字符串仅包含小写英文字母。

输入格式
第一行包含整数 N，表示操作数。

接下来 N 行，每行包含一个操作指令，指令为 I x 或 Q x 中的一种。

输出格式
对于每个询问指令 Q x，都要输出一个整数作为结果，表示 x 在集合中出现的次数。

每个结果占一行。

数据范围
1≤N≤2∗104
输入样例：
5
I abc
Q abc
Q ab
I ab
Q ab
输出样例：
1
0
1

#include<iostream>
#include<algorithm>
#include<cstring>
using namespace std;
const int N = 1e5 + 10;
int n;
int son[N][26];
int cnt[N];
int idx;

void Insert(string x)
{
    int p = 0;
    for(int i = 0;i < x.size();i++)
    {
        int u = x[i] - 'a';
        if(!son[p][u]) son[p][u] = ++idx;
        p = son[p][u];
    }
    cnt[p]++;
}

int query(string x)
{
    int p = 0;
    for(int i = 0;i < x.size();i++)
    {
        int u = x[i] - 'a';
        if(!son[p][u])
        {
            return 0;
        }
        p = son[p][u];
    }
    return cnt[p];
}


int main()
{
    cin >> n;

    while(n--)
    {
        string op;
        cin >> op;
        string x;
        cin >> x;
        if(op == "I")
        {
            Insert(x);
        }
        else
        {
            cout << query(x) << endl;
        }
    }
    return 0;
}

算法核心:
trie树那里，觉得可以稍微补充下怎么用数组去建树，一开始以为[N][26]的第一维度是树的层数；现在搞懂了，一维是结点总数，而结点和结点之间的关系（谁是谁儿子）存在第二个维度，比如[0][1]=3, [0]表示根节点，[1]表示它有一个儿子‘b’,这个儿子的下标是3；接着如果有一个[3][2]=8 ; 说明根节点的儿子‘b’也有一个儿子‘c’，这个孙子的下标就是8；这样传递下去，就是一个字符串。随便给一个结点][x][y], 并不能看出它在第几层，只能知道，它的儿子是谁。