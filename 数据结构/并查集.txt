并查集

例题:https://www.acwing.com/problem/content/838/

一共有 n 个数，编号是 1∼n，最开始每个数各自在一个集合中。

现在要进行 m 个操作，操作共有两种：

M a b，将编号为 a 和 b 的两个数所在的集合合并，如果两个数已经在同一个集合中，则忽略这个操作；
Q a b，询问编号为 a 和 b 的两个数是否在同一个集合中；
输入格式
第一行输入整数 n 和 m。

接下来 m 行，每行包含一个操作指令，指令为 M a b 或 Q a b 中的一种。

输出格式
对于每个询问指令 Q a b，都要输出一个结果，如果 a 和 b 在同一集合内，则输出 Yes，否则输出 No。

每个结果占一行。

数据范围
1≤n,m≤105
输入样例：
4 5
M 1 2
M 3 4
Q 1 2
Q 1 3
Q 3 4
输出样例：
Yes
No
Yes

#include<iostream>
#include<cstring>
#include<algorithm>
using namespace std;
const int N = 1e5 + 10;
int p[N];
int n,m;

int find(int x)
{
    if(p[x] != x) p[x] = find(p[x]);
    return p[x];
}

void Merge(int x,int y)
{
    p[find(x)] = find(y);
}

bool query(int x,int y)
{
    if(find(x) != find(y)) return false;
    else return true;
}

int main()
{
    cin >> n >> m;
    for(int i = 1;i <= n;i++)
        p[i] = i;
    while(m--)
    {
        char op;
        cin >> op;
        int x,y;
        cin >> x >> y;
        if(op == 'M')
        {
            Merge(x,y);
        }
        else
        {
            if(query(x,y)) cout << "Yes" << endl;
            else cout << "No" << endl;
        }
    }
    return 0;
}

算法核心:
关键步骤 find函数的调用
每次调用find函数都会进行路径压缩

当对某个节点调用find函数时find函数会对从节点到其祖宗节点上所有的节点全部指向祖宗节点 将多层树结构压缩成为一层

if(p[x] != x) 的意思是还没到达其祖宗节点 因为只有祖宗节点的父节点才等于他本身

并查集维护集合点的个数

例题:https://www.acwing.com/problem/content/839/

给定一个包含 n 个点（编号为 1∼n）的无向图，初始时图中没有边。

现在要进行 m 个操作，操作共有三种：

C a b，在点 a 和点 b 之间连一条边，a 和 b 可能相等；
Q1 a b，询问点 a 和点 b 是否在同一个连通块中，a 和 b 可能相等；
Q2 a，询问点 a 所在连通块中点的数量；
输入格式
第一行输入整数 n 和 m。

接下来 m 行，每行包含一个操作指令，指令为 C a b，Q1 a b 或 Q2 a 中的一种。

输出格式
对于每个询问指令 Q1 a b，如果 a 和 b 在同一个连通块中，则输出 Yes，否则输出 No。

对于每个询问指令 Q2 a，输出一个整数表示点 a 所在连通块中点的数量

每个结果占一行。

数据范围
1≤n,m≤105
输入样例：
5 5
C 1 2
Q1 1 2
Q2 1
C 2 5
Q2 5
输出样例：
Yes
2
3

#include<iostream>
#include<algorithm>
#include<cstring>
using namespace std;
const int N = 1e5 + 10;
int n,m;
int p[N];
int Size[N];
int find(int x)
{
    if(p[x] != x) p[x] = find(p[x]);
    return p[x];
}

void Merge(int x,int y)
{
    p[find(x)] = find(y);
}

int main()
{
    cin >> n >> m;

    for(int i = 1;i <= n;i++) 
    {
        p[i] = i;
        Size[i] = 1;
    }

    while(m--)
    {
        string op;
        cin >> op;
        int a,b;
        if(op == "C")
        {
            cin >> a >> b;
            if(a == b) continue;
            else 
            {
                if(find(a) != find(b))
                {
                    Size[find(b)] += Size[find(a)];
                    Merge(a,b);
                }    
            }
        }
        else if(op == "Q1")
        {
            cin >> a >> b;
            if(find(a) == find(b)) 
                cout << "Yes" << endl;
            else 
                cout << "No" << endl;
        }
        else
        {
            cin >> a;
            cout << Size[find(a)] << endl;
        }
    }
    return 0;
}

算法核心:
核心操作 维护一个Size数组
数组内部只有祖先节点存储有效元素 祖先节点存储着此联通块内部的节点数量
每次合并操作将两个祖先节点的Size值相加 