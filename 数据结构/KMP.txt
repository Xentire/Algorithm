KMP字符串匹配算法

例题:https://www.acwing.com/problem/content/833/

给定一个字符串 S，以及一个模式串 P，所有字符串中只包含大小写英文字母以及阿拉伯数字。

模式串 P 在字符串 S 中多次作为子串出现。

求出模式串 P 在字符串 S 中所有出现的位置的起始下标。

输入格式
第一行输入整数 N，表示字符串 P 的长度。

第二行输入字符串 P。

第三行输入整数 M，表示字符串 S 的长度。

第四行输入字符串 S。

输出格式
共一行，输出所有出现位置的起始下标（下标从 0 开始计数），整数之间用空格隔开。

数据范围
1≤N≤105
1≤M≤106
输入样例：
3
aba
5
ababa
输出样例：
0 2

#include <iostream>
#include <algorithm>
using namespace std;
const int M = 1e6 + 10;
char p[M],s[M];
int n,m;
const int N = 1e5 + 10;
int ne[N];
int main()
{
    cin >> n >> p + 1 >> m >> s + 1;
    for(int i = 2,j = 0;i <= n;i++)
    {
        //预处理next数组
        //i在前 j在后 若是可以匹配上则j++
        //否则j回溯到ne[j]处 
        //ne[j]表示的是从1~j中可以与j为尾的字串相匹配的前缀串的最大长度
        //回溯到ne[j]可以使得当前p串的与s串的匹配上

        while(j && p[i] != p[j + 1]) j = ne[j];
        if(p[i] == p[j + 1]) j++;
        ne[i] = j;
    }

    for(int i = 1,j = 0;i <= m;i++)
    {
        while(j && s[i] != p[j + 1]) j = ne[j];
        if(s[i] == p[j + 1]) j++;
        else j = ne[j];
        if(j == n)
        {
            cout << i - n << " ";
            j = ne[j];
        }
    }
    cout << endl;
    return 0;

}
