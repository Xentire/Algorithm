栈

例题:https://www.acwing.com/problem/content/830/

实现一个栈，栈初始为空，支持四种操作：

push x – 向栈顶插入一个数 x；
pop – 从栈顶弹出一个数；
empty – 判断栈是否为空；
query – 查询栈顶元素。
现在要对栈进行 M 个操作，其中的每个操作 3 和操作 4 都要输出相应的结果。

输入格式
第一行包含整数 M，表示操作次数。

接下来 M 行，每行包含一个操作命令，操作命令为 push x，pop，empty，query 中的一种。

输出格式
对于每个 empty 和 query 操作都要输出一个查询结果，每个结果占一行。

其中，empty 操作的查询结果为 YES 或 NO，query 操作的查询结果为一个整数，表示栈顶元素的值。

数据范围
1≤M≤100000,
1≤x≤109
所有操作保证合法，即不会在栈为空的情况下进行 pop 或 query 操作。

输入样例：
10
push 5
query
push 6
pop
query
pop
empty
push 4
query
empty
输出样例：
5
5
YES
4
NO

#include <iostream>
#include <algorithm>
using namespace std;
const int N = 1e5 + 10;
int stk[N];
int tt = 0;
void push(int x)
{
    stk[tt++] = x;
}
void pop()
{
    --tt;
}
bool empty()
{
    return !tt;
}
int query()
{
    return stk[tt - 1];
}

int main()
{
    int m;
    cin >> m;
    while(m--)
    {
        string choice
        cin >> choice;
        if(choice == "push")
        {
            int x;
            cin >> x;
            push(x);
        }
        else if (choice == "pop")
        {
            pop();
        }
        else if(choice == "empty")
        {
            if(empty()) cout << "YES" << endl;
            else cout << "NO" << endl;
        }
        else
        {
            cout << query() << endl;
        }
    }
    
    
    return 0;
}

单调栈

 例题:https://www.acwing.com/problem/content/832/

给定一个长度为 N 的整数数列，输出每个数左边第一个比它小的数，如果不存在则输出 −1。

输入格式
第一行包含整数 N，表示数列长度。

第二行包含 N 个整数，表示整数数列。

输出格式
共一行，包含 N 个整数，其中第 i 个数表示第 i 个数的左边第一个比它小的数，如果不存在则输出 −1。

数据范围
1≤N≤105
1≤数列中元素≤109
输入样例：
5
3 4 2 7 5
输出样例：
-1 3 -1 2 2

#include<iostream>
#include<cstring>
#include<algorithm>
using namespace std;
const int N = 1e5 + 10;
int stk[N];
int tt = 0;
int arr[N];
int n;
int main()
{
    cin >> n;

    for(int i = 1;i <= n;i++)
    {
        cin >> arr[i];
        while(tt && stk[tt] >= arr[i]) tt--;
        if(tt) cout << stk[tt] << " ";
        else cout << -1 << " ";
        stk[++tt] = arr[i];
    }

    return 0;
}

算法核心:
单调栈原理
单调栈是一种特殊的数据结构，其栈内元素始终保持单调递增或者单调递减的特性。在这个问题中，我们要找数组中每个元素左边第一个比它小的元素，因此使用单调递增栈。
单调递增栈的核心思想是：当我们遍历数组时，将元素依次压入栈中。如果新元素小于栈顶元素，就不断弹出栈顶元素，直到栈顶元素小于新元素或者栈为空，然后再将新元素压入栈中。这样，栈内元素就始终保持单调递增的顺序。
总结 最后一个与arr数组中比较的一定是距离arr最近的且最小的值