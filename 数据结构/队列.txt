队列

例题:https://www.acwing.com/problem/content/831/

实现一个队列，队列初始为空，支持四种操作：

push x – 向队尾插入一个数 x；
pop – 从队头弹出一个数；
empty – 判断队列是否为空；
query – 查询队头元素。
现在要对队列进行 M 个操作，其中的每个操作 3 和操作 4 都要输出相应的结果。

输入格式
第一行包含整数 M，表示操作次数。

接下来 M 行，每行包含一个操作命令，操作命令为 push x，pop，empty，query 中的一种。

输出格式
对于每个 empty 和 query 操作都要输出一个查询结果，每个结果占一行。

其中，empty 操作的查询结果为 YES 或 NO，query 操作的查询结果为一个整数，表示队头元素的值。

数据范围
1≤M≤100000,
1≤x≤109,
所有操作保证合法，即不会在队列为空的情况下进行 pop 或 query 操作。

输入样例：
10
push 6
empty
query
pop
empty
push 3
push 4
pop
query
push 6
输出样例：
NO
6
YES
4

#include <iostream>
#include <algorithm>
using namespace std;
const int N = 1e5 + 10;
int q[N];
int head = 0,tail = -1;
void push(int x)
{
    q[++tail] = x;
}
void pop()
{
    head++;
}
bool empty()
{
    return head <= tail;
}
int query()
{
    return q[head];
}

int main()
{
    int m;
    cin >> m;
    while(m--)
    {
        string choice;
        cin >> choice;
        if(choice == "push")
        {
            int x;
            cin >> x;
            push(x);
        }
        else if(choice == "pop")
        {
            pop();
        }
        else if(choice == "empty")
        {
            if(empty()) cout << "NO" << endl;
            else cout << "YES" << endl;
        }
        else 
        {
            cout << query() << endl;
        }
    }
    
    
    return 0;
}

单调队列

例题:https://www.acwing.com/problem/content/156/

给定一个大小为 n≤106 的数组。

有一个大小为 k 的滑动窗口，它从数组的最左边移动到最右边。

你只能在窗口中看到 k 个数字。

每次滑动窗口向右移动一个位置。

以下是一个例子：

该数组为 [1 3 -1 -3 5 3 6 7]，k 为 3。

窗口位置	最小值	最大值
[1 3 -1] -3 5 3 6 7	-1	3
1 [3 -1 -3] 5 3 6 7	-3	3
1 3 [-1 -3 5] 3 6 7	-3	5
1 3 -1 [-3 5 3] 6 7	-3	5
1 3 -1 -3 [5 3 6] 7	3	6
1 3 -1 -3 5 [3 6 7]	3	7
你的任务是确定滑动窗口位于每个位置时，窗口中的最大值和最小值。

输入格式
输入包含两行。

第一行包含两个整数 n 和 k，分别代表数组长度和滑动窗口的长度。

第二行有 n 个整数，代表数组的具体数值。

同行数据之间用空格隔开。

输出格式
输出包含两个。

第一行输出，从左至右，每个位置滑动窗口中的最小值。

第二行输出，从左至右，每个位置滑动窗口中的最大值。

数据范围
1≤n≤106,
1≤k≤n
输入样例：
8 3
1 3 -1 -3 5 3 6 7
输出样例：
-1 -3 -3 -3 3 3
3 3 5 5 6 7

#include <iostream>
#include <algorithm>
using namespace std;
int k,n;
const int N = 1e6 + 10;
int q[N];
int head,tail = -1;
int arr[N];
//q数组中存储的是原arr数组的下标
int main()
{
    cin >> n >> k;
    for(int i = 0;i < n;i++) cin >> arr[i];
    
    for(int i = 0;i < n;i++)
    {
        if(head <= tail && i - k + 1 > q[head]) head++;
        
        while(head <= tail && arr[i] <= arr[q[tail]]) tail--;
        q[++tail] = i;
        if(i - k + 1 >= 0) cout << arr[q[head]] << " ";
    }
    cout << endl;
    head = 0,tail = -1;
    for(int i = 0;i < n;i++)
    {
        if(head <= tail && i - k + 1 > q[head]) head++;
        
        while(head <= tail && arr[i] >= arr[q[tail]]) tail--;
        q[++tail] = i;
        if(i - k + 1 >= 0) cout << arr[q[head]] << " ";
    }
    cout << endl;
    return 0;
}