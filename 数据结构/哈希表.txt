散列表

例题:https://www.acwing.com/problem/content/842/

维护一个集合，支持如下几种操作：

I x，插入一个整数 x；
Q x，询问整数 x 是否在集合中出现过；
现在要进行 N 次操作，对于每个询问操作输出对应的结果。

输入格式
第一行包含整数 N，表示操作数量。

接下来 N 行，每行包含一个操作指令，操作指令为 I x，Q x 中的一种。

输出格式
对于每个询问指令 Q x，输出一个询问结果，如果 x 在集合中出现过，则输出 Yes，否则输出 No。

每个结果占一行。

数据范围
1≤N≤105
−109≤x≤109
输入样例：
5
I 1
I 2
I 3
Q 2
Q 5
输出样例：
Yes
No

开放寻址法 :: 

#include<iostream>
#include<algorithm>
#include<cstring>
using namespace std;
const int N = 200003,null = 0x3f3f3f3f;
int h[N];
int n;
int find(int x)
{
    int index = (x % N + N) % N;
    while(h[index] != x && h[index] != null)
    {
        index++;
        if(index == N) index = 0;
    }
    return index;
}

int main()
{
    cin >> n;
    memset(h,0x3f,sizeof h);
    while(n--)
    {
        string op;
        cin >> op;
        int x;
        cin >> x;
        int in = find(x);
        if(op == "I")
        {
            h[in] = x;
        }
        else
        {
            if(h[in] == null) cout << "No" << endl;
            else cout << "Yes" << endl;
        }
    }
    return 0;
}



拉链法 :: 

#include<iostream>
#include<algorithm>
#include<cstring>
using namespace std;
const int N = 1e5 + 3;
int e[N],ne[N],idx;
int h[N];
int n;

int find(int x)
{
    int index = (x % N + N) % N;

    return index;
}

void insert(int x)
{
    int index = find(x);
    for(int i = h[index];i != -1;i = ne[i])
    {
        if(e[i] == x) return;
    }
    ne[idx] = h[index];
    h[index] = idx;
    e[idx] = x;
    idx++;
}



bool query(int x)
{
    int index = find(x);
    for(int i = h[index];i != -1;i = ne[i])
    {
        if(e[i] == x) return true;
    }
    return false;    
}

int main()
{
    cin >> n;
    memset(h,-1,sizeof h);
    while(n--)
    {
        string op;
        cin >> op;
        int x;
        cin >> x;
        if(op == "I")
        {
            insert(x);
        }
        else
        {
            if(query(x)) cout << "Yes" << endl;
            else cout << "No" << endl;
        }
    }
    return 0;
}

字符串哈希

例题:https://www.acwing.com/problem/content/843/

给定一个长度为 n 的字符串，再给定 m 个询问，每个询问包含四个整数 l1,r1,l2,r2，请你判断 [l1,r1] 和 [l2,r2] 这两个区间所包含的字符串子串是否完全相同。

字符串中只包含大小写英文字母和数字。

输入格式
第一行包含整数 n 和 m，表示字符串长度和询问次数。

第二行包含一个长度为 n 的字符串，字符串中只包含大小写英文字母和数字。

接下来 m 行，每行包含四个整数 l1,r1,l2,r2，表示一次询问所涉及的两个区间。

注意，字符串的位置从 1 开始编号。

输出格式
对于每个询问输出一个结果，如果两个字符串子串完全相同则输出 Yes，否则输出 No。

每个结果占一行。

数据范围
1≤n,m≤105
输入样例：
8 3
aabbaabb
1 3 5 7
1 3 6 8
1 2 1 2
输出样例：
Yes
No
Yes

#include <iostream>
#include <algorithm>
#include <cstring>
using namespace std;
const int N = 1e5 + 10,p = 131;
typedef unsigned long long ULL;
ULL sump[N],hashmp[N];
int n,m;
ULL find(int l,int r)
{
    return hashmp[r] - hashmp[l - 1] * sump[r - l + 1];
}
int main()
{
    char s[N];
    cin >> n >> m;
    cin >> s + 1;
    sump[0] = 1;
    for(int i = 1;i <= n;i++)
    {
        sump[i] = sump[i - 1] * p;
        hashmp[i] = hashmp[i - 1] * p + s[i];
    }
    while(m--)
    {
        int l1,l2,r1,r2;
        cin >> l1 >> r1 >> l2 >> r2;
        if(find(l1,r1) == find(l2,r2)) cout << "Yes" << endl;
        else cout << "No" << endl;
    }
    
    return 0;
}

算法核心:
将字符串当成二进制数 每多加一个字符就进位  二进制可以表示所有的数  字符串哈希值也可以表示所有的字符组合
当p取131和13331的时候冲突概率最小