单链表

例题:https://www.acwing.com/problem/content/828/

实现一个单链表，链表初始为空，支持三种操作：

向链表头插入一个数；
删除第 k 个插入的数后面的一个数；
在第 k 个插入的数后插入一个数。
现在要对该链表进行 M 次操作，进行完所有操作后，从头到尾输出整个链表。

注意:题目中第 k 个插入的数并不是指当前链表的第 k 个数。例如操作过程中一共插入了 n 个数，则按照插入的时间顺序，这 n 个数依次为：第 1 个插入的数，第 2 个插入的数，…第 n 个插入的数。

输入格式
第一行包含整数 M，表示操作次数。

接下来 M 行，每行包含一个操作命令，操作命令可能为以下几种：

H x，表示向链表头插入一个数 x。
D k，表示删除第 k 个插入的数后面的数（当 k 为 0 时，表示删除头结点）。
I k x，表示在第 k 个插入的数后面插入一个数 x（此操作中 k 均大于 0）。
输出格式
共一行，将整个链表从头到尾输出。

数据范围
1≤M≤100000
所有操作保证合法。

输入样例：
10
H 9
I 1 1
D 1
D 0
H 6
I 3 6
I 4 5
I 4 5
I 3 4
D 6
输出样例：
6 4 6 5

#include <iostream>
#include <algorithm>
using namespace std;
const int N = 1e5 + 10;
int head,e[N],ne[N],idx;
int n;
void init()
{
    idx = 1;
    head = -1;
}
void insert(int x,int k)
{
    e[idx] = x;
    ne[idx] = ne[k];
    ne[k] = idx++;i
}
void Remove(int k)
{
    ne[k] = ne[ne[k]];
}
void Head_Insert(int x)
{
    e[idx] = x;
    ne[idx] = head;
    head = idx;
    idx++;
    
}
int main()
{
    init();
    cin >> n;
    while(n--)
    {
        int k,x;
        char choice;
        cin >> choice;
        if(choice == 'H')
        {
            cin >> x;
            Head_Insert(x);
        }
        else if(choice == 'D')
        {
            cin >> k;
            if(!k) head = ne[head];
            Remove(k);
        }
        else if(choice == 'I')
        {
            cin >> k >> x;
            insert(x,k);
        }
    }
    
    for(int i = head;i != -1;i = ne[i])
    {
        cout << e[i] << " ";
    }
    cout << endl;
    return 0;
}

双链表

例题:https://www.acwing.com/problem/content/829/

实现一个双链表，双链表初始为空，支持 5 种操作：

在最左侧插入一个数；
在最右侧插入一个数；
将第 k 个插入的数删除；
在第 k 个插入的数左侧插入一个数；
在第 k 个插入的数右侧插入一个数
现在要对该链表进行 M 次操作，进行完所有操作后，从左到右输出整个链表。

注意:题目中第 k 个插入的数并不是指当前链表的第 k 个数。例如操作过程中一共插入了 n 个数，则按照插入的时间顺序，这 n 个数依次为：第 1 个插入的数，第 2 个插入的数，…第 n 个插入的数。

输入格式
第一行包含整数 M，表示操作次数。

接下来 M 行，每行包含一个操作命令，操作命令可能为以下几种：

L x，表示在链表的最左端插入数 x。
R x，表示在链表的最右端插入数 x。
D k，表示将第 k 个插入的数删除。
IL k x，表示在第 k 个插入的数左侧插入一个数。
IR k x，表示在第 k 个插入的数右侧插入一个数。
输出格式
共一行，将整个链表从左到右输出。

数据范围
1≤M≤100000
所有操作保证合法。

输入样例：
10
R 7
D 1
L 3
IL 2 10
D 3
IL 2 7
L 8
R 9
IL 4 7
IR 2 2
输出样例：
8 7 7 3 2 9

#include<iostream>
#include<cstring>
#include<algorithm>
using namespace std;
const int N = 100010;
int e[N],l[N],r[N],idx;
int n;

void init()
{
    idx = 2;
    r[0] = 1;
    l[1] = 0;
}

void Insert(int k,int x)
{
    e[idx] = x;
    l[idx] = k;
    r[idx] = r[k];
    l[r[k]] = idx;
    r[k] = idx;
    idx++;
}

void dele(int k)
{
    l[r[k]] = l[k];
    r[l[k]] = r[k];
}

int main()
{
    cin >> n;
    init();
    while(n--)
    {
        string ch;
        cin >> ch;
        int k,x;
        if(ch == "L")
        {
            cin >> x;
            Insert(0,x);
        }
        else if(ch == "R")
        {
            cin >> x;
            Insert(l[1],x);
        }
        else if(ch == "D")
        {
            cin >> k;
            dele(k + 1);
        }
        else if(ch == "IL")
        {
            cin >> k >> x;
            Insert(l[k + 1],x);
        }
        else if(ch == "IR")
        {
            cin >> k >> x;
            Insert(k + 1,x);
        }
    }
    
    for(int i = r[0];i != 1;i = r[i])
    {
        cout << e[i] << " ";
    }
    cout << endl;
    
    return 0;
}