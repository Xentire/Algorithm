堆排序

例题:https://www.acwing.com/problem/content/840/

输入一个长度为 n 的整数数列，从小到大输出前 m 小的数。

输入格式
第一行包含整数 n 和 m。

第二行包含 n 个整数，表示整数数列。

输出格式
共一行，包含 m 个整数，表示整数数列中前 m 小的数。

数据范围
1≤m≤n≤105，
1≤数列中元素≤109
输入样例：
5 3
4 5 1 3 2
输出样例：
1 2 3

#include<iostream>
#include<algorithm>
#include<cstring>
using namespace std;
int n,m;
const int N = 1e5 + 10;
int h[N];
int cnt;
void down(int x)
{
    int t = x; //这里的if语句应该是拿x来比较因为要比较是x的左子树小还是右子树小  需要把更小的子节点换到根节点上
    if(x * 2 <= cnt && h[x *2] < h[t]) t = x * 2;
    if(x * 2 + 1 <= cnt && h[x * 2 + 1] < h[t]) t = x * 2 + 1;
    if(t != x)
    {
        swap(h[t],h[x]);
        down(t);
    }
}
int main()
{
    cin >> n >> m;

    for(int i = 1;i <= n;i++)
    {
        cin >> h[i];
    }
    cnt = n;
    for(int i = cnt / 2;i >= 1;i--)
    {
        down(i);
        //从最后一个节点的根节点开始down  因为叶子节点不需要down  down的操作是为了将更小的节点向上移动  将更大的节点向下移动 因为构造的是小根堆
    }
    while(m--)
    {
        cout << h[1] << " ";
        h[1] = h[cnt--];
        down(1);
    }

    return 0;
}

堆

例题:https://www.acwing.com/problem/content/841/

维护一个集合，初始时集合为空，支持如下几种操作：

I x，插入一个数 x；
PM，输出当前集合中的最小值；
DM，删除当前集合中的最小值（数据保证此时的最小值唯一）；
D k，删除第 k 个插入的数；
C k x，修改第 k 个插入的数，将其变为 x；
现在要进行 N 次操作，对于所有第 2 个操作，输出当前集合的最小值。

输入格式
第一行包含整数 N。

接下来 N 行，每行包含一个操作指令，操作指令为 I x，PM，DM，D k 或 C k x 中的一种。

输出格式
对于每个输出指令 PM，输出一个结果，表示当前集合中的最小值。

每个结果占一行。

数据范围
1≤N≤105
−109≤x≤109
数据保证合法。

输入样例：
8
I -10
PM
I -10
D 1
C 2 8
I 6
PM
DM
输出样例：
-10
6

#include <iostream>
#include <algorithm>
using namespace std;
const int N = 1e5 + 10;
int arr[N];
int n,SIZE,m;
int ph[N],hp[N];
//ph第k个插入的数字在当前堆中的下标
//hp当前堆中的下标是第几个插入的数字
void heapswap(int x,int y)
{
    swap(ph[hp[x]],ph[hp[y]]);
    swap(hp[x],hp[y]);
    swap(arr[x],arr[y]);
}
void down(int x)
{
    int p = x;
    if(x * 2 <= SIZE && arr[x * 2] < arr[p]) p = x * 2;
    if(x * 2 + 1 <= SIZE && arr[x * 2 + 1] < arr[p]) p = x * 2 + 1;
    if(p != x)
    {
        heapswap(p,x);
        down(p);
    }
}
void up(int x)
{
    while(x / 2 && arr[x / 2] > arr[x])
    {
        heapswap(x / 2,x);
        x >>= 1;
    }
}

int main()
{
    cin >> n;
    while(n--)
    {
        string choice;
        cin >> choice;
        if(choice == "I")
        {
            int x;
            cin >> x;
            m++;
            SIZE++;
            arr[SIZE] = x;
            ph[m] = SIZE;
            hp[SIZE] = m;
            up(SIZE);
        }
        else if(choice == "PM")
        {
            cout << arr[1] << endl;
        }
        else if(choice == "DM")
        {
            heapswap(1,SIZE);
            SIZE--;
            down(1);
        }
        else if(choice == "D") 
        {
            int k;
            cin >> k;
            k = ph[k];
            heapswap(k,SIZE);
            SIZE--;
            down(k);
            up(k);
    
        }
        else
        {
            int k,x;
            cin >> k >> x;
            k = ph[k];
            arr[k] = x;
            up(k);
            down(k);
        
        }
    
    }
    
    
    return 0;
}

算法核心::
ph对应pointer heap
指的是在第k个插入的数对应在堆中的下标
hp对应heap pointer
指的是下标是k的数
是在第hp[k]插入的
因为题目要求管理插入顺序
故建造两个数组来分别映射