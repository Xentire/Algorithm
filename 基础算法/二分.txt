二分查找(红蓝染色法)

例题:https://www.acwing.com/problem/content/791/

给定一个按照升序排列的长度为 n 的整数数组，以及 q 个查询。

对于每个查询，返回一个元素 k 的起始位置和终止位置（位置从 0 开始计数）。

如果数组中不存在该元素，则返回 -1 -1。

输入格式
第一行包含整数 n 和 q，表示数组长度和询问个数。

第二行包含 n 个整数（均在 1∼10000 范围内），表示完整数组。

接下来 q 行，每行包含一个整数 k，表示一个询问元素。

输出格式
共 q 行，每行包含两个整数，表示所求元素的起始位置和终止位置。

如果数组中不存在该元素，则返回 -1 -1。

数据范围
1≤n≤100000
1≤q≤10000
1≤k≤10000
输入样例：
6 3
1 2 2 3 3 4
3
4
5
输出样例：
3 4
5 5
-1 -1

#include <iostream>
#include <algorithm>
#include <cstring>
using namespace std;
int n,q;
const int N = 1e5 + 10;
int arr[N];

int BinarySearch1(int x)
{
    int l = -1,r = n;
    while(l + 1 < r)
    {
        int mid = l + r >> 1;
        if(arr[mid] < x) l = mid;
        else r = mid;
    }
    return r;
}
int BinarySearch2(int x)
{
    int l = -1,r = n;
    while(l + 1 < r)
    {
        int mid = l + r >> 1;
        if(arr[mid] <= x) l = mid;
        else r = mid;
    }
    return l;
}
int main()
{
    cin >> n >> q;
    for(int i = 0;i < n;i++) cin >> arr[i];
    while(q--)
    {
        int k;
        cin >> k;
        int l = BinarySearch1(k);
        int r = BinarySearch2(k);
        if(arr[l] == arr[r] && arr[l] == k) cout << l << " " << r << endl;
        else cout << -1 << " " << -1 << endl;
    }
    return 0;
}

浮点数二分

例题:https://www.acwing.com/problem/content/792/

给定一个浮点数 n，求它的三次方根。

输入格式
共一行，包含一个浮点数 n。

输出格式
共一行，包含一个浮点数，表示问题的解。

注意，结果保留 6 位小数。

数据范围
−10000≤n≤10000
输入样例：
1000.00
输出样例：
10.000000

#include <iostream>
#include <algorithm>
using namespace std;
double n;

int main()
{
    cin >> n;
    double l = -100,r = 100;
    while(r - l > 1e-8)
    {
        double mid = (l + r) / 2;
        if(mid * mid * mid <= n) l = mid;
        else r = mid;
    }
    printf("%.6lf",r); 
    
    return 0;
}