离散化

例题:https://www.acwing.com/problem/content/804/

假定有一个无限长的数轴，数轴上每个坐标上的数都是 0。

现在，我们首先进行 n 次操作，每次操作将某一位置 x 上的数加 c。

接下来，进行 m 次询问，每个询问包含两个整数 l 和 r，你需要求出在区间 [l,r] 之间的所有数的和。

输入格式
第一行包含两个整数 n 和 m。

接下来 n 行，每行包含两个整数 x 和 c。

再接下来 m 行，每行包含两个整数 l 和 r。

输出格式
共 m 行，每行输出一个询问中所求的区间内数字和。

数据范围
−109≤x≤109,
1≤n,m≤105,
−109≤l≤r≤109,
−10000≤c≤10000
输入样例：
3 3
1 2
3 6
7 5
1 3
4 6
7 8
输出样例：
8
0
5

#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;
const int N = 3e5 + 10;
typedef pair<int,int> PII;
int Sum[N];
int n,m;
vector<int> Alls;
vector<PII> Add;
vector<PII> Query;

int find(int x)
{
    int l = -1,r = Alls.size() + 1;
    while(l + 1 < r)
    {
        int mid = l + r >> 1;
        if(Alls[mid] < x) l = mid;
        else r = mid;
    }
    return r;
}
int main()
{
   cin >> n >> m;
   for(int i = 1;i <= n;i++)
   {
       int x,c;
       cin >> x >> c;
       Alls.push_back(x);
       Add.push_back({x,c});
   }
   
   for(int i = 0;i < m;i++)
   {
       int l,r;
       cin >> l >> r;
       Query.push_back({l,r});
       Alls.push_back(l);
       Alls.push_back(r);
   }
   sort(Alls.begin(),Alls.end());
   Alls.erase(unique(Alls.begin(),Alls.end()),Alls.end());
   
   for(int i = 0;i < n;i++)
   {
       int x = find(Add[i].first);
       Sum[x] += Add[i].second;
   }
   for(int i = 1;i <= Alls.size();i++)
   {
       Sum[i] += Sum[i - 1];
   }
   
   for(int i = 0;i < m;i++)
   {
       int x = find(Query[i].first),y = find(Query[i].second);
   
       cout << Sum[y] - Sum[x - 1] << endl;
   }i
    
    return 0;
}

算法核心:
将很大范围但是总数却很少数字映射到一个很小的范围内 用一个数组来存储映射后的值 一个下标对应一个映射数